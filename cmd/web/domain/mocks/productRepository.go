// Code generated by mockery v2.16.0. DO NOT EDIT.

package mocks

import (
	context "context"

	domain "github.com/teerkevin23/rundoo/cmd/web/domain"
	mock "github.com/stretchr/testify/mock"
)

// ProductRepository is an autogenerated mock type for the ProductRepository type
type ProductRepository struct {
	mock.Mock
}

// Create provides a mock function with given fields: c, product
func (_m *ProductRepository) Create(c context.Context, product *domain.Product) error {
	ret := _m.Called(c, product)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *domain.Product) error); ok {
		r0 = rf(c, product)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
// Create provides a mock function with given fields: c, product
func (_m *ProductRepository) Get(c context.Context, filter string) ([]domain.Product, error) {
	ret := _m.Called(c, filter)

	var r0 []domain.Product
	if rf, ok := ret.Get(0).(func(context.Context, string) []domain.Product); ok {
		r0 = rf(c, filter)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.Product)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(c, filter)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
////TODO
//// FetchByCategory provides a mock function with given fields: c, filter
//func (_m *ProductRepository) FetchByCategory(c context.Context, filter string) ([]domain.Product, error) {
//	ret := _m.Called(c, filter)
//
//	var r0 []domain.Product
//	if rf, ok := ret.Get(0).(func(context.Context, string) []domain.Product); ok {
//		r0 = rf(c, filter)
//	} else {
//		if ret.Get(0) != nil {
//			r0 = ret.Get(0).([]domain.Product)
//		}
//	}
//
//	var r1 error
//	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
//		r1 = rf(c, filter)
//	} else {
//		r1 = ret.Error(1)
//	}
//
//	return r0, r1
//}
////TODO
//// FetchByName provides a mock function with given fields: c, filter
//func (_m *ProductRepository) FetchByName(c context.Context, filter string) ([]domain.Product, error) {
//	ret := _m.Called(c, filter)
//
//	var r0 []domain.Product
//	if rf, ok := ret.Get(0).(func(context.Context, string) []domain.Product); ok {
//		r0 = rf(c, filter)
//	} else {
//		if ret.Get(0) != nil {
//			r0 = ret.Get(0).([]domain.Product)
//		}
//	}
//
//	var r1 error
//	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
//		r1 = rf(c, filter)
//	} else {
//		r1 = ret.Error(1)
//	}
//
//	return r0, r1
//}
////TODO
//// FetchBySKU provides a mock function with given fields: c, filter
//func (_m *ProductRepository) FetchBySKU(c context.Context, filter string) ([]domain.Product, error) {
//	ret := _m.Called(c, filter)
//
//	var r0 []domain.Product
//	if rf, ok := ret.Get(0).(func(context.Context, string) []domain.Product); ok {
//		r0 = rf(c, filter)
//	} else {
//		if ret.Get(0) != nil {
//			r0 = ret.Get(0).([]domain.Product)
//		}
//	}
//
//	var r1 error
//	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
//		r1 = rf(c, filter)
//	} else {
//		r1 = ret.Error(1)
//	}
//
//	return r0, r1
//}

type mockConstructorTestingTNewProductRepository interface {
	mock.TestingT
	Cleanup(func())
}

// NewProductRepository creates a new instance of ProductRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewProductRepository(t mockConstructorTestingTNewProductRepository) *ProductRepository {
	mock := &ProductRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}